# https://setuptools.pypa.io/en/latest/userguide/quickstart.html
[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
exclude = '''

(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
  | foo.py           # also separately exclude a file named foo.py in
                     # the root of the project
)
'''

[tool.interrogate]
ignore-init-method = true
ignore-init-module = false
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = false
fail-under = 100
exclude = ["setup.py", "docs", "build", "examples"]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
verbose = 2
quiet = false
whitelist-regex = []
color = true

[tool.pytest.ini_options]
addopts = "-v --cov --cov-report term-missing"
testpaths = [
    "tests",
]

[tool.isort]
profile = "black"

[tool.ruff]
# See https://docs.astral.sh/ruff/rules/ for a list of rules.
# See https://docs.astral.sh/ruff/configuration/#using-pyprojecttoml for configuration documentation
select = ["E", "F", "I"]

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
namespaces = false

[project]
name = "{{ cookiecutter.__package_name }}"
version = "0.0.1"
dependencies = [
    "matplotlib",
    "pandas",
    "scikit-learn",
    "numpy",
]
readme = "README.md"

[project.optional-dependencies]
tests = [
    "pytest"
]
docs = [
    "mkdocs-material",
    "mkdocs"
]

[project.scripts]
{{ cookiecutter.__cli_name }} = "{{ cookiecutter.__module_name }}.cli:app"


[tool.coverage.run]
omit = [
    "tests/*",
]

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["osx-arm64", "linux-64", "win-64"]

[tool.pixi.pypi-dependencies]
{{ cookiecutter.__package_name }} = { path = ".", editable = true }

# NOTE: Core dependencies (needed for running the program) go here.
[tool.pixi.feature.core.dependencies]
ipykernel = "*"
ipython = "*"
jupyter = "*"
matplotlib = "*"
numpy = "*"
pandas = "*"
pyprojroot = "*"
scikit-learn = "*"
scipy = "*"
seaborn = "*"
pymc = "*"
python-dotenv = "*"
typer = "*"

# NOTE: Testing dependencies (not needed for running program) go here.
[tool.pixi.feature.testing.dependencies]
pytest = "*"
pytest-cov = "*"
hypothesis = "*"

# NOTE: Docs dependencies (needed for documentation and notebooks) go here.
[tool.pixi.feature.docs.dependencies]
mkdocs = "*"
mkdocs-material = "*"
mknotebooks = "*"

# NOTE: Developer tools (for code checks and quality) go here.
[tool.pixi.feature.devtools.dependencies]
black = "*"
flake8 = "*"
interrogate = "*"
pre-commit = "*"
ruff = "*"
isort = "*"
pixi-kernel = "*"

[tool.pixi.feature.devtools.pypi-dependencies]
pre-commit = "*"
pydoclint = "*"

[tool.pixi.feature.cuda]
platforms = ["linux-64"]
system-requirements = {cuda = "12"}

# NOTE: CUDA-specific dependencies go here.
[tool.pixi.feature.cuda.dependencies]
jaxlib = { version = "*", build = "*cuda12*" }

[tool.pixi.feature.testing.tasks]
test = "pytest"

[tool.pixi.feature.devtools.tasks]
lint = "pre-commit run --all-files"
commit = "git commit"

[tool.pixi.feature.docs.tasks]
build-docs = "mkdocs build"
serve-docs = "mkdocs serve"

[tool.pixi.feature.setup.tasks]
setup = "pre-commit install --install-hooks && pre-commit autoupdate"
update = "pre-commit autoupdate"

[tool.pixi.environments]
default = ["core", "testing", "devtools", "setup"]
docs = ["docs"]
testing = ["core", "testing", "setup"]
cuda = ["core", "testing", "devtools", "setup", "cuda"]
