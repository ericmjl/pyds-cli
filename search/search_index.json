{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PyDS: A wrapper for creating, configuring, and managing your data science projects","text":""},{"location":"#why-this-project-exists","title":"Why this project exists?","text":"<p>We started by asking the simple questions:</p> <p>Why do I have to memorize 4 bash incantations in order to release a Python package?</p> <p>Why do I have to remember so many sequences of commands to do anything?</p> <p>What is the kind of tooling that we need to support making \"good\" workflows easy?</p> <p>PyDS was born out in response to these questions. We'd rather avoid the frustration of memorizing commands from a smattering of tools and repetitively recalling a particular folder structure from memory in order to set up my projects and perform common tasks (such as Python package publishing).</p> <p>PyDS follows the philosophy that in order for data scientists to be efficient, they must have tooling at hand that automates the mundane, reduces the number of commands that they need to remember, and makes the sane things easy to do (that's riff off security folks' mantra, \"making the right things easy to do\").</p> <p>In the spirit of automation, this project was thus born. With it, my aim here is to bring sanity to project initialization.</p>"},{"location":"#quickstart","title":"Quickstart","text":"<p>Ensure that you have the Anaconda distribution of Python installed, and that <code>conda</code> can be found using your <code>PATH</code> environment variable.</p> <p>Then, install from PyPI:</p> <pre><code>pip install pyds\n</code></pre> <p>For more information, take a look at the CLI page to see what commands exist!</p>"},{"location":"#design-philosophy","title":"Design philosophy","text":"<p>PyDS wraps workflows. Workflows are verbs that, underneath the hood, are implemented by a chain of shell commands. To read more, see the Design Philosophy page for more details.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>To learn how to contribute, head over to the Contributing page.</p>"},{"location":"#inspirations","title":"Inspirations","text":"<p>PyDS is inspired by a lot of conversations and reading others' work. I would like to acknowledge their ideas.</p>"},{"location":"#cookiecutter-data-science","title":"Cookiecutter Data Science","text":"<p>Cookiecutter Data Science (CDS) provided a great starting point for the directory structure. There are places we deviate from CDS, such as omitting a <code>data/</code> directory, because in the cloud age, we should be securely referencing single sources of truth for our data by way of URIs, s3 buckets (or compatible), database connections, and more. (My opinion is that data should not live in a project source repository.) Without CDS, the inspiration for automation would not have existed.</p>"},{"location":"#data-science-bootstrap-notes","title":"Data Science Bootstrap Notes","text":"<p>This is my online book in which I documented a lot of the workflows and best practices that I developed over my career as a data scientist. It has some deficiencies, however, including a focus on tools, with insufficient focus on workflows. With PyDS, my goal is to bring the focus back on workflows.</p>"},{"location":"#how-to-organize-your-data-science-project","title":"How to organize your data science project","text":"<p>Many years ago (in 2017, to be precise), I wrote down my first ideas on the theme of \"good data science project organization\". The result was a GitHub gist with a lot of ideas, but not automation provided.</p>"},{"location":"#the-good-research-code-handbook","title":"The Good Research Code Handbook","text":"<p>This is an excellent resource that I got wind of in December 2021. In it is a detailed handbook-style resource that lays out step-by-step instructions for structuring your data science and/or research project code.</p>"},{"location":"#conversations-with-colleagues-at-moderna","title":"Conversations with colleagues at Moderna","text":"<p>My conversations with colleagues on the DSAI team at Moderna were highly informative for this project.</p>"},{"location":"cli/","title":"<code>pyds</code>","text":"<p>Usage:</p> <pre><code>$ pyds [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--install-completion</code>: Install completion for the current shell.</li> <li><code>--show-completion</code>: Show completion for the current shell, to copy it or customize the installation.</li> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>analysis</code></li> <li><code>configure</code>: Initial configuration for pyds.</li> <li><code>env</code></li> <li><code>pixi</code></li> <li><code>project</code></li> <li><code>system</code></li> <li><code>talk</code></li> <li><code>version</code>: Print the current version of pyds.</li> </ul>"},{"location":"cli/#pyds-analysis","title":"<code>pyds analysis</code>","text":"<p>Usage:</p> <pre><code>$ pyds analysis [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>add</code>: Add dependencies to the analysis notebook.</li> <li><code>create</code>: Create a new notebook in the notebooks...</li> <li><code>init</code>: Initialize a new data analysis project...</li> <li><code>run</code>: Start working on the analysis in Jupyter.</li> </ul>"},{"location":"cli/#pyds-analysis-add","title":"<code>pyds analysis add</code>","text":"<p>Add dependencies to the analysis notebook.</p> <p>Usage:</p> <pre><code>$ pyds analysis add [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-p, --package TEXT</code>: Packages to add to the notebook</li> <li><code>--notebook PATH</code>: Path to the notebook to modify  [default: analysis.ipynb]</li> <li><code>--requirements PATH</code>: Requirements file to add dependencies from</li> <li><code>--extra TEXT</code>: Extra dependency group to add (e.g. 'dev')</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#pyds-analysis-create","title":"<code>pyds analysis create</code>","text":"<p>Create a new notebook in the notebooks directory with default dependencies.</p> <p>Usage:</p> <pre><code>$ pyds analysis create [OPTIONS] NAME\n</code></pre> <p>Arguments:</p> <ul> <li><code>NAME</code>: Name of the notebook to create. Will be created in the notebooks directory.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-p, --package TEXT</code>: Additional packages to include</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#pyds-analysis-init","title":"<code>pyds analysis init</code>","text":"<p>Initialize a new data analysis project with a juv-managed notebook.</p> <p>Usage:</p> <pre><code>$ pyds analysis init [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--python TEXT</code>: Minimum Python version for the analysis</li> <li><code>--notebook PATH</code>: Name of the notebook to create  [default: analysis.ipynb]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#pyds-analysis-run","title":"<code>pyds analysis run</code>","text":"<p>Start working on the analysis in Jupyter.</p> <p>Usage:</p> <pre><code>$ pyds analysis run [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--notebook PATH</code>: Path to the notebook to run  [default: analysis.ipynb]</li> <li><code>--jupyter TEXT</code>: Specific Jupyter frontend to use (e.g. lab, notebook)</li> <li><code>--with TEXT</code>: Additional dependencies for this session</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#pyds-configure","title":"<code>pyds configure</code>","text":"<p>Initial configuration for pyds.</p> <p>:param name: Your name. :param email: Your email address. :param github_username: Your GitHub username. :param twitter_username: Your Twitter username. :param linkedin_username: Your LinkedIn username.</p> <p>Usage:</p> <pre><code>$ pyds configure [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--name TEXT</code>: Your name  [required]</li> <li><code>--email TEXT</code>: Your email address  [required]</li> <li><code>--github-username TEXT</code>: Your GitHub username</li> <li><code>--twitter-username TEXT</code>: Your Twitter username</li> <li><code>--linkedin-username TEXT</code>: Your LinkedIn username</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#pyds-env","title":"<code>pyds env</code>","text":"<p>Usage:</p> <pre><code>$ pyds env [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>delete</code>: Remove an environment variable from the...</li> <li><code>set</code>: Set a key-value pair in the <code>.env</code> file.</li> <li><code>show</code>: Show all environment variables.</li> </ul>"},{"location":"cli/#pyds-env-delete","title":"<code>pyds env delete</code>","text":"<p>Remove an environment variable from the <code>.env</code> file.</p> <p>:param key: The name of the environment variable.</p> <p>Usage:</p> <pre><code>$ pyds env delete [OPTIONS] KEY\n</code></pre> <p>Arguments:</p> <ul> <li><code>KEY</code>: [required]</li> </ul> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#pyds-env-set","title":"<code>pyds env set</code>","text":"<p>Set a key-value pair in the <code>.env</code> file.</p> <p>:param key: The name of the environment variable. :param value: The value to set the environment variable to.</p> <p>Usage:</p> <pre><code>$ pyds env set [OPTIONS] KEY VALUE\n</code></pre> <p>Arguments:</p> <ul> <li><code>KEY</code>: [required]</li> <li><code>VALUE</code>: [required]</li> </ul> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#pyds-env-show","title":"<code>pyds env show</code>","text":"<p>Show all environment variables.</p> <p>:param keys: Whether to show the keys or not. :param values: Whether to show the values or not.</p> <p>Usage:</p> <pre><code>$ pyds env show [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--keys / --no-keys</code>: [default: keys]</li> <li><code>--values / --no-values</code>: [default: no-values]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#pyds-pixi","title":"<code>pyds pixi</code>","text":"<p>Usage:</p> <pre><code>$ pyds pixi [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>rebuild</code>: Rebuild the pixi environment.</li> </ul>"},{"location":"cli/#pyds-pixi-rebuild","title":"<code>pyds pixi rebuild</code>","text":"<p>Rebuild the pixi environment.</p> <p>This command should be used whenever you suspect that your Pixi environment might be broken. This may show up in packages cryptically having files not being found.</p> <p>Usage:</p> <pre><code>$ pyds pixi rebuild [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#pyds-project","title":"<code>pyds project</code>","text":"<p>Usage:</p> <pre><code>$ pyds project [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>init</code>: Initialize a new Python data science project.</li> </ul>"},{"location":"cli/#pyds-project-init","title":"<code>pyds project init</code>","text":"<p>Initialize a new Python data science project.</p> <p>Usage:</p> <pre><code>$ pyds project init [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#pyds-system","title":"<code>pyds system</code>","text":"<p>Usage:</p> <pre><code>$ pyds system [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>init</code>: Bootstrap user's system with necessary...</li> <li><code>status</code>: Report status for tools that we expect to...</li> </ul>"},{"location":"cli/#pyds-system-init","title":"<code>pyds system init</code>","text":"<p>Bootstrap user's system with necessary programs.</p> <p>Usage:</p> <pre><code>$ pyds system init [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#pyds-system-status","title":"<code>pyds system status</code>","text":"<p>Report status for tools that we expect to have installed.</p> <p>We check for the presence of:</p> <ol> <li>A <code>pixi</code> installation.</li> <li>A <code>homebrew</code> installation.</li> <li>The presence of a .pypirc file.</li> </ol> <p>Usage:</p> <pre><code>$ pyds system status [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#pyds-talk","title":"<code>pyds talk</code>","text":"<p>Usage:</p> <pre><code>$ pyds talk [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>init</code>: Initialize a new talk repository.</li> </ul>"},{"location":"cli/#pyds-talk-init","title":"<code>pyds talk init</code>","text":"<p>Initialize a new talk repository.</p> <p>Usage:</p> <pre><code>$ pyds talk init [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#pyds-version","title":"<code>pyds version</code>","text":"<p>Print the current version of pyds.</p> <p>Usage:</p> <pre><code>$ pyds version [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"faq/","title":"Frequently Asked Questions","text":""},{"location":"faq/#source-code-library","title":"Source Code Library","text":"<p>can I access this package in any directory as long as I'm in my project env?</p> <p>Yes! pyds-cli does a <code>pip install -e .</code>, which installs the source code into the conda environment. This means that even if you navigate away from the repository directory, you'll be able to access the package that has been created.</p> <p>do changes I make to the source code (which I assume is stored in the project folder) automatically get incorporated for later imports of the source code package</p> <p>Yes! The source package is installed in editable mode. This means that any code changes are automatically reflected in the installed package, such that when you run a new Python process that uses the library code, they will show up without needing to be re-installed. As a bonus tip, if you use Jupyter notebooks, include the following two lines:</p> <p>%load_ext autoreload %autoreload 2</p> <p>And that will ensure that the Jupyter kernel, which maintains a live Python process, doesn't need to restart in order to see the new code changes.</p> <p>I'm also interested in creating sphinx-like documentation for my code, and unsure if pyds-cli does that or something like that out -of-the-box</p> <p>By default, we have pyds-cli set up to scaffold a mkdocs (documentation system) + mkdocs-material (style) documentation. This allows you to write Markdown for documentation. I've personally tried using sphinx but it's on the \"too complex\" side for the kinds of documentation that I write, which is the motivation for me to use mkdocs instead.</p>"},{"location":"contributing/00-index/","title":"Contributing","text":"<p>There are many ways to contribute to the project. Please read the next few pages to explore how!</p>"},{"location":"contributing/01-new-commands/","title":"Contributing new commands to the public package","text":"<p>PyDS is intentionally targeting the broadest possible audience. Therefore, idiosyncratic workflows are intentionally out-of-scope. The issue tracker is the place to propose new workflows. There should be at least 50 thumbs up on the proposed new command and its underlying shell implementation.</p> <p>New workflows should satisfy the design philosophy of the package. They should also be well-established workflows, with arguments presented why they are well-established. (Evidence may include a smattering of blog posts introducing \"how to do X\", official documentation present on the tool, and )</p>"},{"location":"contributing/02-documentation/","title":"Documentation","text":"<p>We'd love help with documentation!</p>"},{"location":"contributing/02-documentation/#asciinema-recordings","title":"Asciinema recordings","text":"<p>What are the workflows that you love the most? Record them down using <code>asciinema</code>!</p>"},{"location":"contributing/02-documentation/#missing-docs","title":"Missing docs","text":"<p>Did you find something not documented in the docs that should be? Raise the issue in the Issue Tracker, and let's find a good home for it together.</p>"},{"location":"design/00-index/","title":"Design Philosophy","text":"<p>PyDS wraps workflows first; tools are also wrapped, but as a matter of convenience. Workflows are defined here as a chain of shell commands, which might involve multiple tools, that are repetitively executed. You might be tempted to put those into a Makefile, and execute them with a single command, <code>make something</code>. That's the kind of workflow that PyDS wraps.</p> <p>Within a Python data science project, there are workflows that can be automated easily. These workflows may involve multiple commands; that's extra headspace to commit to memory. Here are some workflows supported.</p> <p>Because workflows are verbs, PyDS' internal sub-command structure is also centered around verbs. Doing so makes expressing what we want to do much more natural. Example commands look like:</p> <pre><code>pyds project initialize\npyds package publish\npyds docs preview\n</code></pre> <p>And more generically:</p> <pre><code>pyds &lt;thing&gt; &lt;verb&gt;\n</code></pre> <p>Here, <code>&lt;thing&gt;</code> refers to artifacts of some kind. Documentation (<code>docs</code>) are an artifact of the project that we make. The Python package (<code>package</code>) is another artifact. The project as a whole (<code>project</code>) is yet another.</p> <p>We try to avoid anti-patterns in the implementation. There is no lock-in with pyds. We don't implement our own idiosyncratic tools; literally most of the commands dispatch out to other tools that we assume to be present on the user's system. All that <code>pyds</code> does is chain them together into higher-order workflows that follow a natural English expression. We want to support workflows that compose together tools in the stack; we don't want to own the stack.</p>"},{"location":"design/01-opinionated-choices/","title":"Opinionated choices","text":""},{"location":"design/01-opinionated-choices/#dependence-on-conda","title":"Dependence on <code>conda</code>","text":"<p>The Anaconda distribution of Python has become the de facto Python distribution recommended for data scientists to use.</p>"},{"location":"design/01-opinionated-choices/#embracing-software-development-practices","title":"Embracing software development practices","text":"<p>I strongly believe that models, at their core, are software. Hence, workflows commonly associated with software development, such as writing tests and documentation, ought to be part of a data scientist's workflow as well. As data scientists, if we don't embrace software development ideas, we set up future personal headache and barriers to current collaboration.</p> <p>Software development workflows heavily relies on the concept of single sources of truth for stuff. This is the spirit behind the term refactoring, where we extract out stuff that might have been copied-and-pasted. That stuff might be a function that, after refactoring, we can import and use elsewhere. It might be a Markdown document that contains units of ideas that we refer to elsewhere. Or, it might a reference Jupyter notebook that teaches us the linearized logic of the analysis; in other words, an authoritative \"report\" that forms the basis of our knowledge sharing efforts. Buying in to \"authoritative single sources of truth\" are what prevents us from sloppily duplicating notebooks, copying and pasting code, and creating a world of confusion for future selves and collaborators.</p>"},{"location":"design/01-opinionated-choices/#notebooks-are-best-used-for-specific-purposes","title":"Notebooks are best used for specific purposes","text":"<p>From personal experience and from reading others' experiences, we've come to the conclusion that notebooks are best used as</p> <ol> <li>A space for experimentation and prototyping, and</li> <li>Providing documentation for others.</li> </ol> <p>Usage in any other form makes us more prone to sloppy workflows. (To be clear, I'm not saying that we are guaranteed to engage in sloppy workflows, I am merely saying that we will end up with fewer mental guardrails against sloppy workflows.)</p>"},{"location":"design/01-opinionated-choices/#custom-source-code-library","title":"Custom source code library","text":"<p>Based on the philosophy of \"single sources of truth\", PyDS CLI automatically creates a custom source code library that is automatically installed into the automatically-created conda environment that is also automatically named in a way that enables you to import into notebooks and other source code. By default, this is done as a local, editable install, enabling you to freely modify the source code and use the new code automatically without needing to re-install the package each time you make changes.</p> <p>This source code library is a great place to refactor out code! For example, if you write a custom PyMC3 or JAX model, you can stick it into <code>models.py</code>. If you have data preprocessing code, you can stick them into <code>preprocessing.py</code>. And if you want to automatically validate dataframes, write a <code>pandera</code> schema and stick it in <code>schemas.py</code>!</p>"},{"location":"design/01-opinionated-choices/#testing-with-pytest","title":"Testing with <code>pytest</code>","text":"<p>Software testing gives you a contract between current self and others. By writing a test down, you're recording what you expect to be the behaviour of a function at the time of implementation. If in the future someone changes the function or changes something that changes the expected inputs of that function, then a test will help you catch deviations from those expectations. <code>pytest</code> is the modern way to handle software testing, by abstracting away lots of boilerplate that would otherwise be written using the built-in <code>unittest</code> Python library.</p>"},{"location":"design/01-opinionated-choices/#docs-with-mkdocs","title":"Docs with <code>mkdocs</code>","text":"<p>MkDocs is a growing and popular alternative to Sphinx, which has historically been the backbone of Python project documentation. Being able to use pure Markdown to write docs confers a lot of advantages, but accessibility and ease-of-use is its biggest advantage: Its syntax is widely-known, it is easy for newcomers to pick up, one rarely needs to refer to Markdown documentation to look up syntax, it is easily portable to other formats (PDF, LaTeX, HTML, etc.), and for web-targeted documentation, advanced users can easily mix in custom HTML as necessary.</p>"},{"location":"design/01-opinionated-choices/#building-docs-with-jupyter-notebooks","title":"Building docs with Jupyter notebooks","text":"<p>Jupyter notebooks are awesome for prototyping and documenting. By including <code>mknotebooks</code> automatically, we give ourselves the superpower of being able to include Jupyter notebooks inside our docs.</p> <p>If paired with a CI/CD bot that always executes notebooks that are part of docs, then suddenly, our docs are living docs, and can effectively serve as an 'integration test' for our analysis code.</p>"},{"location":"design/01-opinionated-choices/#data-never-live-in-the-repo","title":"Data never live in the repo","text":"<p>Data should never live in the repository.</p> <p>Data should never live in the repository.</p> <p>Data should never, ever live in the repository.</p> <p>In a cloud-first world, we should be able to reliably store files in a remote location and pull them into our machine on demand.</p>"},{"location":"design/01-opinionated-choices/#leverage-cicd-as-a-bot","title":"Leverage CI/CD as a bot","text":"<p>CI/CD gets bandied about as a fancy term in some circles. I tend to think of CI/CD in a much, much more simple fashion: it's a robot. \ud83d\ude05 CI/CD systems, such as GitHub Actions, are robots that you can program using YAML (or, gasp! Jenkins) files rather than Bash scripts alone. We provide some basic CI/CD files in the form of GitHub Actions configuration files that automatically provide code checking, testing, and docs building on GitHub.</p>"},{"location":"design/01-opinionated-choices/#github-actions","title":"GitHub Actions","text":"<p>We target GitHub actions as an opinionated choice. GitHub Actions hits the right level of abstraction for CI/CD pipelining. The syntax is easy to learn, it has easily mix-and-matchable components, and is free for open source projects. PyDS CLI ships with GitHub actions that will help you check your code style and automatically run tests; you don't have to remember to add them in! (But feel free to delete these files if they're not necessary; they're generally harmless outside of GitHub so we don't bother asking if you want them or not and instead leave them to you to remove.)</p>"},{"location":"design/01-opinionated-choices/#pre-commit-hooks","title":"Pre-commit hooks","text":"<p>We primarily use pre-commit hooks to help you catch code quality issues before you <code>git commit</code> them. We use the <code>pre-commit</code> framework to manage the code checking tools. You can think of pre-commit as a bot that runs code checks before you're allowed to commit the code; if any fails, you'll be alerted. We use checkers for docstring coverage, docstring argument coverage, code formatting, and ensuring notebook outputs are never committed.</p> <p>Using pre-commit can be a bit jarring at first, because you might have a ton of work being committed. That said, though, if you commit often and early, then you'll catch your code quality issues on a faster turnaround cycle, which makes fixing code issues much easier than otherwise.</p>"},{"location":"design/01-opinionated-choices/#development-containers","title":"Development Containers","text":"<p>Development containers are another innovation in the developer tooling space that gives us the ability to work in an even more isolated environment than pure conda environments alone. If we were to use Russian Matryoshka dolls (the nested dolls) as an analogy, Docker-based development containers are the largest doll that ship a computer, while conda environments are the second largest doll that ship an isolated Python interpreter. Development containers work well with VSCode; we ship an opinionated VSCode dev container Dockerfile definition that VSCode can automatically discover and build for you. If dev containers and, more broadly, GitHub codespaces are something you use, then you'll have no barriers to starting them up.</p>"},{"location":"releases/v0.3.7/","title":"V0.3.7","text":""},{"location":"releases/v0.3.7/#version-037","title":"Version 0.3.7","text":"<p>This new version includes several improvements to the GitHub Actions workflow, code readability, and the release process. The GitHub Actions checkout step has been upgraded to version 4, with fetch-depth and fetch-tags options enabled. Code readability has been enhanced in several files, with long strings split into multiple lines and import statements rearranged. The release process now includes the generation of release notes using the llamabot tool.</p>"},{"location":"releases/v0.3.7/#new-features","title":"New Features","text":"<ul> <li>The GitHub Actions checkout step has been upgraded to version 4, with fetch-depth and fetch-tags options enabled to ensure all tags and history are fetched during the checkout process (bbaad2) (Eric Ma)</li> <li>The GitHub Actions checkout step has been upgraded to version 4, with fetch-depth and fetch-tags options enabled to ensure all tags and history are fetched during the checkout process (4a0184) (Eric Ma)</li> <li>Release notes generation using the llamabot tool has been added to the PyPI package release workflow. The release notes are then added to the GitHub release body, automating the process of generating and adding release notes to each new release (a6685b) (Eric Ma)</li> </ul>"},{"location":"releases/v0.3.7/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>No bug fixes in this release.</li> </ul>"},{"location":"releases/v0.3.7/#deprecations","title":"Deprecations","text":"<ul> <li>The typer command has been removed from the docs.yaml.j2 workflow file. The command was previously used to generate documentation, but is no longer necessary (43b773) (Eric Ma)</li> </ul>"},{"location":"releases/v0.3.8/","title":"V0.3.8","text":""},{"location":"releases/v0.3.8/#version-038","title":"Version 0.3.8","text":"<p>This new version includes several updates to the testing environment, pre-commit hooks, and GitHub Actions workflow. It also introduces a change to the setuptools configuration in the pyproject.toml.j2 template.</p>"},{"location":"releases/v0.3.8/#new-features","title":"New Features","text":"<ul> <li>The pytest fixture scope in the cli tests has been changed from \"session\" to \"function\", ensuring a more isolated testing environment (23ad0d0) (Eric Ma)</li> <li>The versions of pre-commit hooks have been updated to their latest versions, and the darglint hook has been replaced with pydoclint for better documentation linting (23ad0d0) (Eric Ma)</li> <li>The pytest fixture scope in the conftest.py file has been changed from \"function\" to \"session\", potentially improving the performance of the test suite (23ad0d0) (Eric Ma)</li> <li>The conda tests for rebuild and update now expect an exit code of 1 instead of 0, reflecting the assumption that these tests are always executed from within a conda environment, not the base environment (23ad0d0) (Eric Ma)</li> <li>The trigger events for the GitHub Actions workflow have been modified to include both pull requests and pushes to the main branch, and the version of the checkout action has been updated from v2 to v4 (52b7520) (Eric Ma)</li> <li>The setuptools configuration in the pyproject.toml.j2 template has been updated. The 'packages' field under 'tool.setuptools' has been replaced with a 'where' field under 'tool.setuptools.packages.find', allowing for more flexible package discovery (4fc10ff) (Eric Ma)</li> </ul>"},{"location":"releases/v0.3.8/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>None in this release.</li> </ul>"},{"location":"releases/v0.3.8/#deprecations","title":"Deprecations","text":"<ul> <li>None in this release.</li> </ul>"},{"location":"releases/v0.3.9/","title":"V0.3.9","text":""},{"location":"releases/v0.3.9/#version-039","title":"Version 0.3.9","text":"<p>This new version introduces an optional feature for automatic generation of release notes and improves the quality of the code that is released to PyPI by ensuring that it passes all pre-commit checks. It also simplifies the testing workflow by removing an unnecessary step.</p>"},{"location":"releases/v0.3.9/#new-features","title":"New Features","text":"<ul> <li>Added an optional feature for automatic generation of release notes. This feature uses the llamabot tool and the pre-commit tool to ensure that all generated files adhere to the file quality standards. (503a4da) (Eric Ma)</li> <li>Updated the PyPI release workflow to include pre-commit. This change ensures that all files pass the pre-commit checks before a release is made. (d58f176) (Eric Ma)</li> </ul>"},{"location":"releases/v0.3.9/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>No bug fixes in this release.</li> </ul>"},{"location":"releases/v0.3.9/#deprecations","title":"Deprecations","text":"<ul> <li>Removed the step for uploading code coverage in the GitHub Actions workflow file pr-tests.yaml. This step was previously using the codecov/codecov-action@v2 action. (eda5ef8) (Eric Ma)</li> </ul>"},{"location":"releases/v0.3.9/#other-changes","title":"Other Changes","text":"<ul> <li>Bumped version from 0.3.8 to 0.3.9. (475dbe) (github-actions)</li> <li>Specified exact string to look for when bumping versions. (b799733) (Eric Ma)</li> </ul>"},{"location":"releases/v0.4.0/","title":"V0.4.0","text":""},{"location":"releases/v0.4.0/#version-040","title":"Version 0.4.0","text":"<p>This release includes several improvements to the project, including streamlining the release process, enhancing test coverage, and updating the project template.</p>"},{"location":"releases/v0.4.0/#new-features","title":"New Features","text":"<ul> <li>Automated release notes generation and commit using <code>llamabot</code> (08e24ed, Eric Ma)</li> <li>Added tests for talk initialization and removed deprecated project init test (e580139, Eric Ma)</li> <li>Enhanced project initialization and update tests (503193c, Eric Ma)</li> <li>Removed talk_name parameter from init function (b8e659c, Eric Ma)</li> <li>Removed conda activation from test workflow (852939a, Eric Ma)</li> <li>Added affiliation field and updated title placeholder in talk template (95a353e, Eric Ma)</li> <li>Added 'sh' library to project dependencies (2e24c17, Eric Ma)</li> <li>Replaced run() with sh.which in discover_conda_executable (19bffb5, Eric Ma)</li> <li>Updated micromamba version to latest in pr-tests.yaml workflow (83855ac, Eric Ma)</li> <li>Added micromamba support in discover_conda_executable (bbc336a, Eric Ma)</li> <li>Added clean target to PHONY in Makefile (09867ec, Eric Ma)</li> <li>Upgraded micromamba version to 1.8.1 (21e4ac6, Eric Ma)</li> <li>Enhanced cookiecutter.json and renamed files in talk template (afb32a1, Eric Ma)</li> <li>Streamlined CLI commands and improved project initialization (c6084ec, Eric Ma)</li> <li>Simplified project initialization process using cookiecutter (8c71c86, Eric Ma)</li> <li>Removed mamba from dependencies (69807ad, Eric Ma)</li> <li>Added cookiecutter to project dependencies (e580010, Eric Ma)</li> <li>Simplified environment variable function names (62736b6, Eric Ma)</li> <li>Removed mamba from dependencies (9971110, Eric Ma)</li> <li>Updated variable names and added new variables in cookiecutter.json (3660324, Eric Ma)</li> <li>Updated variable naming convention in project templates (f0a6737, Eric Ma)</li> <li>Renamed project template files in pyds (de86484, Eric Ma)</li> <li>Added project template configuration and updated file paths (21fbd09, Eric Ma)</li> <li>Replaced miniconda with micromamba in PR tests workflow (542facb, Eric Ma)</li> <li>Replaced miniconda setup with micromamba in GitHub workflows (460c3cb, Eric Ma)</li> <li>Added project and talk template directory paths (f1db6e7, Eric Ma)</li> <li>Specified Python version in GitHub workflow (9183364, Eric Ma)</li> <li>Removed black from pre-commit hooks (558fe0a, Eric Ma)</li> <li>Restructured project templates and removed unused files (a4a2921, Eric Ma)</li> <li>Updated template directory path and cleanup unused code (baf1112, Eric Ma)</li> <li>Added 'talk' command to pyds CLI (6d08cc6, Eric Ma)</li> <li>Added talk initialization command (f070660, Eric Ma)</li> <li>Added cookiecutter to dependencies (b040201, Eric Ma)</li> <li>Added talk template to pyds-cli (a858a04, Eric Ma)</li> <li>Added Makefile for talk presentations (e4f60c9, Eric Ma)</li> <li>Added GitHub Actions workflow and .gitignore for talk slides (bb0abb2, Eric Ma)</li> <li>Relocated template files to 'repo' subdirectory (e10f349, Eric Ma)</li> </ul>"},{"location":"releases/v0.4.0/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Removed redundant activation of base environment in conda update command (dc660dc, Eric Ma)</li> <li>Added coverage omission for test files (b31d191, Eric Ma)</li> <li>Added coverage configuration to omit patterns (95565d4, Eric Ma)</li> </ul>"},{"location":"releases/v0.4.0/#deprecations","title":"Deprecations","text":"<ul> <li>None in this release</li> </ul>"},{"location":"releases/v0.4.1/","title":"V0.4.1","text":""},{"location":"releases/v0.4.1/#version-041","title":"Version 0.4.1","text":"<p>This release includes improvements to the package's completeness by recursively including all files within the <code>pyds</code> directory.</p>"},{"location":"releases/v0.4.1/#new-features","title":"New Features","text":"<ul> <li>All files within the <code>pyds</code> directory are now recursively included, improving the package's completeness. (51d5cb7) (Eric Ma)</li> </ul>"},{"location":"releases/v0.4.1/#bug-fixes","title":"Bug Fixes","text":"<p>No bug fixes were included in this release.</p>"},{"location":"releases/v0.4.1/#deprecations","title":"Deprecations","text":"<p>No deprecations were included in this release.</p> <p>Note: The commit <code>f97ab3ff2dedd91b5747614c7babe8984596e536</code> by <code>github-actions</code> only bumped the version number, so it is not included in the release notes. The commit <code>851a62b8773499b68a5cdb65942138b9d9a4dd84</code> by <code>github-actions</code> added the release notes for version 0.4.0, so it is also not included in the release notes for version 0.4.1.</p>"},{"location":"releases/v0.4.2/","title":"V0.4.2","text":""},{"location":"releases/v0.4.2/#version-042","title":"Version 0.4.2","text":"<p>This release includes several improvements to the presentation template, build process, and GitHub Actions workflow.</p>"},{"location":"releases/v0.4.2/#new-features","title":"New Features","text":"<ul> <li>Updated presentation options in the talk template, changing the transition effect to 'slide' and adding a 'nord' highlight theme for code blocks (6e6fe7f, Eric Ma)</li> <li>Added a markdownlint configuration file to enforce style and conventions within talk templates (65fad6d, Eric Ma)</li> </ul>"},{"location":"releases/v0.4.2/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Corrected the syntax for accessing <code>GHPAGES_TOKEN</code> secret in the GitHub Actions workflow for publishing (1adeed5, Eric Ma)</li> <li>Streamlined the slide build and deployment process by replacing direct reveal-md commands with <code>make build</code> in GitHub Actions and simplifying the <code>Makefile</code> (78fbf50, Eric Ma)</li> <li>Fixed a missing newline at the end of the v0.4.1 release notes document for better compatibility with UNIX text processing tools and standards (538c395, Eric Ma)</li> </ul>"},{"location":"releases/v0.4.2/#deprecations","title":"Deprecations","text":"<ul> <li>None in this release</li> </ul>"},{"location":"releases/v0.4.3/","title":"V0.4.3","text":""},{"location":"releases/v0.4.3/#version-043","title":"Version 0.4.3","text":"<p>This release includes several improvements to the pre-commit configuration, updates to various hook versions, and a new feature for project templates.</p>"},{"location":"releases/v0.4.3/#new-features","title":"New Features","text":"<ul> <li>Pre-commit hooks are now installed before running in the release workflow, ensuring code style and other checks are applied automatically before a release is made (da8236d) (Eric Ma)</li> <li>Added a pre-commit configuration for project templates, improving code quality and consistency in generated projects (79ddb4ae) (Eric Ma)</li> <li>Disabled line length rule for markdown files, allowing for more flexibility in formatting (1d460a6) (Eric Ma)</li> </ul>"},{"location":"releases/v0.4.3/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Ensured pre-commit runs twice on failure in the GitHub Actions workflow, improving the robustness of the CI process (bd82cb2) (Eric Ma)</li> <li>Corrected the project name variable in the template, ensuring consistency across the template configuration (0ec8186) (Eric Ma)</li> <li>Fixed an issue with the <code>__project_snakecase</code> variable in <code>cookiecutter.json</code> to handle hyphens correctly (08beffb) (Eric Ma)</li> </ul>"},{"location":"releases/v0.4.3/#deprecations","title":"Deprecations","text":"<ul> <li>Replaced darglint with pydoclint for docstring linting in the pre-commit configuration (23a38b3) (Eric Ma)</li> </ul> <p>Additionally, various hook versions have been updated to their latest versions to ensure compatibility and leverage improvements:</p> <ul> <li>Pre-commit hooks: v4.6.0</li> <li>Nbstripout: v0.7.1</li> <li>Interrogate: v1.7.0</li> <li>Pydoclint: v0.4.1</li> <li>Ruff-pre-commit: v0.3.5</li> </ul> <p>(2cd5474) (Eric Ma)</p> <p>Please note that the version of pydoclint has been updated to v0.3.8 in the pre-commit configuration. (23a38b3) (Eric Ma)</p> <p>Finally, the pre-commit hooks are now properly installed in the CI environment before running, preventing potential issues related to missing or misconfigured hooks. (3552315) (Eric Ma)</p>"},{"location":"releases/v0.4.4/","title":"V0.4.4","text":""},{"location":"releases/v0.4.4/#version-044","title":"Version 0.4.4","text":"<p>This release includes a new feature to streamline the initial setup process for new projects created with the pyds template.</p>"},{"location":"releases/v0.4.4/#new-features","title":"New Features","text":"<ul> <li>A README.md template has been added within the project template directory, which includes basic project information placeholders and a quick start guide for setting up a development environment using mamba and conda, followed by installing the project in editable mode. (ee9b6166, Eric Ma)</li> </ul>"},{"location":"releases/v0.4.4/#bug-fixes","title":"Bug Fixes","text":"<p>No bug fixes were included in this release.</p>"},{"location":"releases/v0.4.4/#deprecations","title":"Deprecations","text":"<p>No deprecations were included in this release.</p> <p>Note: The commit <code>1bd2ec7c1027ca91546d4d5b115e1c9fda2a6eec</code> by <code>github-actions</code> only bumped the version number and did not introduce any new features, bug fixes, or deprecations. The commit <code>5888b77252d479013d2642d08fe2c48aa17eb020</code> by <code>github-actions</code> added release notes for version 0.4.3 and did not introduce any new features, bug fixes, or deprecations. Therefore, they are not included in the release notes for version 0.4.4.</p>"},{"location":"releases/v0.5.0/","title":"V0.5.0","text":""},{"location":"releases/v0.5.0/#version-050","title":"Version 0.5.0","text":"<p>This release includes improvements to the GitHub Actions workflow for publishing, an updated FAQ section in the documentation, and adjustments to package discovery settings.</p>"},{"location":"releases/v0.5.0/#new-features","title":"New Features","text":"<ul> <li>Manual trigger option and concurrency control added to the GitHub Actions workflow for publishing (5453e67) (Eric Ma)</li> <li>New FAQ section introduced in the documentation (b196a48) (Eric Ma)</li> </ul>"},{"location":"releases/v0.5.0/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Package discovery settings adjusted to include all modules within the package (f093891) (Eric Ma)</li> </ul>"},{"location":"releases/v0.5.0/#deprecations","title":"Deprecations","text":"<ul> <li>No deprecations in this release.</li> </ul> <p>Note: The commit <code>14f42d0a4429c5f56d874624582cd9c619233045</code> by <code>github-actions</code> is related to version bumping and does not introduce new features, bug fixes, or deprecations. The commit <code>81b877ca0a4bf2727f32e87e600eea2d5e5e4e24</code> by <code>Eric Ma</code> is a merge commit and does not contain any code changes. The commit <code>b3ffabd732e48853cb844eff705e5eb57419e7c6</code> by <code>Eric Ma</code> is also a merge commit and does not contain any code changes. The commit <code>f33f284bc3ce25f22ce0c9e4cb0e21762eac2298</code> by <code>github-actions</code> is related to adding release notes and does not introduce new features, bug fixes, or deprecations.</p>"},{"location":"releases/v0.5.1/","title":"V0.5.1","text":""},{"location":"releases/v0.5.1/#version-051","title":"Version 0.5.1","text":"<p>This release includes improvements to the project initialization process, with the addition of a .env file creation feature. This enhancement helps manage environment variables and paths for new Python data science projects.</p>"},{"location":"releases/v0.5.1/#new-features","title":"New Features","text":"<ul> <li>A .env file is now automatically generated during project initialization, which is crucial for managing environment variables and paths that should not be exposed publicly. (a3613e2, Eric Ma)</li> <li>A test case has been added to verify the presence of a .env file in the initialized project directory, ensuring that projects are correctly setting up environment variables. (f56e7b2, Eric Ma)</li> </ul>"},{"location":"releases/v0.5.1/#bug-fixes","title":"Bug Fixes","text":"<p>No bug fixes were included in this release.</p>"},{"location":"releases/v0.5.1/#deprecations","title":"Deprecations","text":"<p>No deprecations were included in this release.</p>"},{"location":"releases/v0.6.0/","title":"V0.6.0","text":""},{"location":"releases/v0.6.0/#version-060","title":"Version 0.6.0","text":"<p>This release includes several improvements and new features to enhance the development experience.</p>"},{"location":"releases/v0.6.0/#new-features","title":"New Features","text":"<ul> <li>Pixi environment setup and adjustments: Introduced Pixi environment setup for better dependency management and testing across different setups. This includes adding a new <code>pixi</code> command in the CLI toolset and updating the <code>pyproject.toml</code> file to define Pixi environment configurations. (129cbd7) (Eric Ma)</li> <li>Automatic Pixi installation on ImportError: Added automatic Pixi installation when it is not found, ensuring seamless availability for users without manual intervention. (27fc2d2) (Eric Ma)</li> <li>Editable installation of pyds-cli in Pixi environment: Allowed for easier development and testing of the <code>pyds-cli</code> package within its own Pixi-managed environment. (48b4b45) (Eric Ma)</li> <li>Pre-commit dependency added: Included pre-commit in the <code>pyproject.toml</code> file to automatically run checks before commits are made, enhancing the development workflow. (00bdac3) (Eric Ma)</li> <li>Added cuda feature: Introduced a new CUDA feature to support GPU-accelerated computations. (01de9b5) (Eric Ma)</li> <li>Removed dependency on homebrew: Simplified the environment setup by removing the dependency on Homebrew. (85ee785) (Eric Ma)</li> </ul>"},{"location":"releases/v0.6.0/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Improved error handling for missing Pixi dependency: Updated the error handling mechanism when the Pixi dependency is not found, providing users with a clear error message and a link to the installation instructions. (77bebf7) (Eric Ma)</li> <li>Replaced curl command with subprocess.run for Pixi installation: Ensured compatibility with environments where the <code>sh</code> module might not be available or preferred, and improved the portability and security of the installation script. (fab6122) (Eric Ma)</li> <li>Fixed missing blank lines and added extra ones for consistency: Applied minor style fixes to various Python files in the project to ensure consistency across the codebase according to PEP 8 guidelines. (830d5fdd) (Eric Ma)</li> </ul>"},{"location":"releases/v0.6.0/#deprecations","title":"Deprecations","text":"<ul> <li>Removed conda command integration: Simplified the CLI interface by removing the conda command and its integration from the CLI application. (5ecc31bc) (Eric Ma)</li> <li>Removed llamabot from template: Removed the llamabot package from the template as it is no longer required. (8abd082) (Eric Ma)</li> <li>Removed cli tooling: Removed the CLI tooling as it is no longer needed in the project. (03a0d0e) (Eric Ma)</li> <li>Removed unused CLI commands and updated project templates: Refactored the CLI interface by removing unused commands and updating project templates to reflect the changes. (0b5872b) (Eric Ma)</li> <li>Removed unused <code>docs</code> command and <code>cfgv</code> dependency: Simplified the CLI application by removing unused components and dependencies, potentially reducing the maintenance overhead and improving the installation time for users. (68ac4c0) (Eric Ma)</li> </ul>"},{"location":"releases/v0.6.1/","title":"V0.6.1","text":""},{"location":"releases/v0.6.1/#version-061","title":"Version 0.6.1","text":"<p>This release includes several updates and improvements to the CUDA dependencies, error messages, and CI/CD system.</p>"},{"location":"releases/v0.6.1/#new-features","title":"New Features","text":"<ul> <li>Updated CUDA dependencies to use jaxlib with CUDA 12 and added system requirements for CUDA 12 on Linux 64-bit platform (0a2a1e3b, Eric Ma)</li> <li>Improved error message for missing .pixi directory and suggested running <code>pixi install</code> to create environment (29cbc5c9, Eric Ma)</li> <li>Updated pyproject.toml dependencies for ruamel.yaml and mkdocstrings (491059a3, Eric Ma)</li> <li>Introduced fixes to CI/CD system (eab8f5ff, Eric Ma)</li> </ul>"},{"location":"releases/v0.6.1/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Removed the CUDA feature from pyproject.toml as it is no longer needed (eb8d154c, Eric Ma)</li> <li>Updated requires-python version in pyproject.toml, removed llamabot dependency from devtools, added devtools to default dependencies, imported sh.rm in tests/cli/conftest.py, and used rm to clean up temporary directory in tests (8a96bb13, Eric Ma)</li> </ul>"},{"location":"releases/v0.6.1/#deprecations","title":"Deprecations","text":"<ul> <li>None in this release</li> </ul>"},{"location":"releases/v0.6.10/","title":"V0.6.10","text":""},{"location":"releases/v0.6.10/#version-0610","title":"Version 0.6.10","text":"<p>This version introduces improvements in the project's continuous integration (CI) workflows, enhances the automation of GitHub Actions updates through Dependabot, and corrects minor issues in the CI configuration for a smoother development process.</p>"},{"location":"releases/v0.6.10/#new-features","title":"New Features","text":"<ul> <li>Automated updates for GitHub Actions with Dependabot, ensuring the project uses the latest versions of actions for security and performance. (5077549) (Eric Ma)</li> <li>Streamlined package release process in GitHub Actions workflows, including the adoption of new tools for package management and building, and updates to release notes generation. (3681105) (Eric Ma)</li> </ul>"},{"location":"releases/v0.6.10/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Corrected the environment name in the GitHub Actions workflow to ensure consistency across CI configurations. (ccb60b5) (Eric Ma)</li> <li>Fixed syntax for variable interpolation in YAML workflow to prevent parsing issues in GitHub Actions. (1b95f1f) (Eric Ma)</li> </ul>"},{"location":"releases/v0.6.10/#deprecations","title":"Deprecations","text":"<ul> <li>No deprecations in this version.</li> </ul>"},{"location":"releases/v0.6.11/","title":"V0.6.11","text":""},{"location":"releases/v0.6.11/#version-0611","title":"Version 0.6.11","text":"<p>This version introduces improvements and bug fixes to the CI/CD workflows, particularly around GitHub Actions for PyPI package release management. Enhancements include syntax corrections, prevention of unintended PyPI publishing during pull requests, and updates to workflow dependencies and configurations.</p>"},{"location":"releases/v0.6.11/#new-features","title":"New Features","text":"<ul> <li>Enhanced GitHub Actions workflow for PyPI package release to support pull request events, update dependencies and configurations, and refine version management and release note generation steps. (d6ff6d) (Eric Ma)</li> <li>Removed explicit Pixi version specification in GitHub Actions workflows, allowing the use of the default Pixi version for more streamlined CI processes. (1dd77f) (Eric Ma)</li> </ul>"},{"location":"releases/v0.6.11/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Corrected syntax for GitHub Actions expressions in the release workflow to ensure proper evaluation and compatibility. (b9edb7) (Eric Ma)</li> <li>Added a condition to the GitHub Actions workflow to prevent PyPI package publishing during pull requests, avoiding unintended releases. (502b19) (Eric Ma)</li> </ul>"},{"location":"releases/v0.6.11/#deprecations","title":"Deprecations","text":"<ul> <li>No deprecations in this version.</li> </ul>"},{"location":"releases/v0.6.12/","title":"V0.6.12","text":""},{"location":"releases/v0.6.12/#version-0612","title":"Version 0.6.12","text":"<p>This version introduces updates to dependencies and workflow configurations, enhancing the project's CI/CD processes and ensuring compatibility with the latest tools.</p>"},{"location":"releases/v0.6.12/#new-features","title":"New Features","text":"<ul> <li>Integrated the setup-pixi action into the code-checks workflow, including caching for Pixi setup with conditional write on main branch pushes. This ensures a smoother CI process by leveraging the latest version of Pixi for code checks. (d38cf8) (Eric Ma)</li> <li>Updated the code-style workflow to use updated tools and configurations, replacing 'setup-pixi' with 'setup-uv' for environment setup and updating pre-commit execution to use 'uvx' command. This change optimizes the workflow for better performance and compatibility with the latest development tools. (d441e8) (Eric Ma)</li> <li>Modified the code style check workflow configuration to only trigger on pull requests and simplified the environment setup by replacing Python setup with UV setup. This adjustment makes the CI process more efficient and focused, reducing unnecessary runs. (0630fe) (Eric Ma)</li> </ul>"},{"location":"releases/v0.6.12/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>There are no specific bug fixes mentioned in this version update.</li> </ul>"},{"location":"releases/v0.6.12/#deprecations","title":"Deprecations","text":"<ul> <li>There are no deprecations mentioned in this version update.</li> </ul>"},{"location":"releases/v0.6.12/#dependency-updates","title":"Dependency Updates","text":"<ul> <li>Bumped prefix-dev/setup-pixi from 0.8.1 to 0.8.7 to take advantage of the latest features and improvements in the setup-pixi action. This update ensures that the project's CI workflows are running with the most current version of the tool. (52aae8) (dependabot[bot])</li> <li>Upgraded peaceiris/actions-gh-pages from version 3 to 4, a major version update that likely includes significant changes and improvements. This upgrade ensures compatibility with the latest GitHub Pages deployment features and best practices. (d69236) (dependabot[bot])</li> </ul>"},{"location":"releases/v0.6.2/","title":"V0.6.2","text":""},{"location":"releases/v0.6.2/#version-062","title":"Version 0.6.2","text":"<p>This release includes updates to the project setup and dependency management, as well as a version bump.</p>"},{"location":"releases/v0.6.2/#new-features","title":"New Features","text":"<ul> <li>The <code>pixi</code> lockfile has been updated to ensure consistent dependency versions (68ca800, Eric Ma)</li> <li>The <code>environment.yml</code> file has been removed and <code>pixi-kernel</code> and <code>ipython</code> dependencies have been added to <code>pyproject.toml</code> to streamline dependency management (05d9399, Eric Ma)</li> </ul>"},{"location":"releases/v0.6.2/#bug-fixes","title":"Bug Fixes","text":"<p>No bug fixes were included in this release.</p>"},{"location":"releases/v0.6.2/#deprecations","title":"Deprecations","text":"<p>No deprecations were included in this release.</p> <p>Note: The commit <code>c315883</code> is a version bump and does not contain any new features or bug fixes. The commit <code>0dc3c14</code> is the addition of release notes for the previous version and does not contain any new features or bug fixes.</p>"},{"location":"releases/v0.6.3/","title":"V0.6.3","text":""},{"location":"releases/v0.6.3/#version-063","title":"Version 0.6.3","text":"<p>This release includes improvements to the project initialization process and updates to the release notes.</p>"},{"location":"releases/v0.6.3/#new-features","title":"New Features","text":"<ul> <li>Default branch is now set to 'main' during git initialization. The initial commit after project setup is also automated. Additionally, '.pixi' has been added to the .gitignore template. (1320d97) (Eric Ma)</li> <li>Release notes for version 0.6.2 have been added. (fc77b05) (github-actions)</li> </ul>"},{"location":"releases/v0.6.3/#bug-fixes","title":"Bug Fixes","text":"<p>No bug fixes were included in this release.</p>"},{"location":"releases/v0.6.3/#deprecations","title":"Deprecations","text":"<p>No deprecations were included in this release.</p>"},{"location":"releases/v0.6.4/","title":"V0.6.4","text":""},{"location":"releases/v0.6.4/#version-064","title":"Version 0.6.4","text":"<p>This release includes several updates to the CLI configuration and test setup, as well as a version bump.</p>"},{"location":"releases/v0.6.4/#new-features","title":"New Features","text":"<ul> <li>The global git configuration has been moved from the test script to the CI workflow, and direct git command dependencies have been removed from the test scripts. This should improve the reliability and maintainability of the test setup. (b22f168) (Eric Ma)</li> <li>The CLI configuration has been updated to use GitHub Tester credentials by default. This should make it easier to use the CLI with GitHub testing. (1564e65) (Eric Ma)</li> </ul>"},{"location":"releases/v0.6.4/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>The version of the <code>pyds-cli</code> package in the <code>pixi.lock</code> file has been updated to 0.6.3 for compatibility. The SHA256 hash for the new version has also been updated. (f7bce31) (Eric Ma)</li> <li>The installation instructions in the <code>README.md</code> file have been updated to use the <code>pixi install</code> command. (7b59f66) (Eric Ma)</li> </ul>"},{"location":"releases/v0.6.4/#deprecations","title":"Deprecations","text":"<ul> <li>None in this release.</li> </ul>"},{"location":"releases/v0.6.5/","title":"V0.6.5","text":""},{"location":"releases/v0.6.5/#version-065","title":"Version 0.6.5","text":"<p>This version introduces several enhancements and bug fixes to improve the efficiency and reliability of the CI/CD workflows, testing strategies, and the CLI interface. Notable changes include the refinement of GitHub Actions workflows, the addition of new tests and features for analysis, and updates to the project's dependency management.</p>"},{"location":"releases/v0.6.5/#new-features","title":"New Features","text":"<ul> <li>Introduced a new analysis module with CLI integration for managing analysis projects, including project initialization and dependency management. (c257966) (Eric Ma)</li> <li>Enhanced environment setup and gitignore handling by creating a dynamic .env file and ensuring it's added to .gitignore. (882824) (Eric Ma)</li> <li>Added tomli 2.0.2 to project dependencies to support better configuration and dependency management. (c4ceb2) (Eric Ma)</li> <li>Refactored project initialization and configuration logic for improved error handling and debugging output in CLI commands. (1b6b29) (Eric Ma)</li> <li>Added pre-commit configuration for various hooks including YAML checks, end-of-file fixer, trailing whitespace, and more for improved code quality. (52a770) (Eric Ma)</li> <li>Implemented running juv in interactive mode to keep the process in the foreground, enhancing the user experience during analysis. (8f9319) (Eric Ma)</li> <li>Added new tests for running notebooks with various options, improving the test coverage for analysis functionalities. (026765) (Eric Ma)</li> </ul>"},{"location":"releases/v0.6.5/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Corrected error output stream for nonexistent notebook checks to stderr, ensuring error messages are properly directed. (30be66) (Eric Ma)</li> <li>Ensured error message for duplicate notebook creation appears in stderr, improving error handling in CLI tests. (bbbabaf) (Eric Ma)</li> </ul>"},{"location":"releases/v0.6.5/#deprecations","title":"Deprecations","text":"<ul> <li>Removed lock file update step from PyPI release workflow, streamlining the release process. (3b8d26) (Eric Ma)</li> </ul>"},{"location":"releases/v0.6.6/","title":"V0.6.6","text":""},{"location":"releases/v0.6.6/#version-066","title":"Version 0.6.6","text":"<p>This version introduces improvements in the project's continuous integration (CI) workflow and refines the project's dependency management system for better performance and compatibility.</p>"},{"location":"releases/v0.6.6/#new-features","title":"New Features","text":"<ul> <li>Updated the CI workflow to run tests across multiple operating systems, enhancing the project's compatibility and reliability on different platforms. (b83eb6) (Eric Ma)</li> <li>Refined the <code>pyproject.toml</code> file to streamline dependency management, including centralizing core dependencies, reorganizing optional dependencies, updating platform-specific configurations, and introducing CUDA-specific settings for improved project setup and execution. (d43f72) (Eric Ma)</li> </ul>"},{"location":"releases/v0.6.6/#bug-fixes","title":"Bug Fixes","text":""},{"location":"releases/v0.6.6/#deprecations","title":"Deprecations","text":""},{"location":"releases/v0.6.7/","title":"V0.6.7","text":""},{"location":"releases/v0.6.7/#version-067","title":"Version 0.6.7","text":"<p>This version introduces a refinement in the CLI analysis module, enhancing the initialization process by removing unnecessary dependencies. It also marks a minor version bump from 0.6.6 to 0.6.7.</p>"},{"location":"releases/v0.6.7/#new-features","title":"New Features","text":"<ul> <li>Simplified the CLI analysis module initialization by removing the pixi environment setup, making the process more straightforward and reducing dependency requirements. (ba43cc) (Eric Ma)</li> </ul>"},{"location":"releases/v0.6.7/#bug-fixes","title":"Bug Fixes","text":""},{"location":"releases/v0.6.7/#deprecations","title":"Deprecations","text":"<p>Please note that the commit for adding release notes and version bumping does not introduce new features, bug fixes, or deprecations directly affecting the end-users, hence they are not listed under these categories.</p>"},{"location":"releases/v0.6.8/","title":"V0.6.8","text":""},{"location":"releases/v0.6.8/#version-068","title":"Version 0.6.8","text":"<p>This version introduces an enhancement to the CLI, specifically improving the user experience when creating notebooks through the command line interface.</p>"},{"location":"releases/v0.6.8/#new-features","title":"New Features","text":"<ul> <li>Enhanced the help text for the notebook creation command's 'name' parameter to provide clearer instructions on specifying the creation directory. This update makes it easier for users to understand where their notebook will be created. (e52caeb) (Eric Ma)</li> </ul>"},{"location":"releases/v0.6.8/#bug-fixes","title":"Bug Fixes","text":""},{"location":"releases/v0.6.8/#deprecations","title":"Deprecations","text":""},{"location":"releases/v0.6.9/","title":"V0.6.9","text":""},{"location":"releases/v0.6.9/#version-069","title":"Version 0.6.9","text":"<p>This version introduces improvements to the development environment setup and enhances code formatting capabilities.</p>"},{"location":"releases/v0.6.9/#new-features","title":"New Features","text":"<ul> <li>Added a new <code>ruff-format</code> hook to the pre-commit configurations to improve code formatting. This addition ensures that the codebase remains clean and adheres to the formatting standards automatically. (ff9b35) (Eric Ma)</li> </ul>"},{"location":"releases/v0.6.9/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>There are no bug fixes in this version.</li> </ul>"},{"location":"releases/v0.6.9/#deprecations","title":"Deprecations","text":"<ul> <li>There are no deprecations in this version.</li> </ul>"},{"location":"releases/v0.6.9/#other-changes","title":"Other Changes","text":"<ul> <li>Refactored the order of pre-commit setup commands in <code>pyproject.toml</code>. This change ensures that hooks are updated before they are installed, which can prevent potential issues with outdated hooks. (1e2e98) (Eric Ma)</li> </ul>"},{"location":"workflows/01-new-project/","title":"Creating a new data science project","text":"<p>When creating a new data science project, there are a lot of little details to remember in order to set up a sane project structure that supports great practices. PyDS lets you set all of that up with one interactive command:</p> <pre><code>pyds project initialize\n</code></pre> <p>Behind the scenes, we create a new Python project with an opinionated directory structure. There's a place to put your <code>notebooks/</code>. There's a custom source directory named after your <code>project_name/</code>, where you can easily refactor out notebook code. Your <code>project_name/</code> source also comes with basic command line interface capabilities that you can expand on in case you wish to make a CLI tool for others to use. There are a smattering of code quality tools automatically installed as part of your <code>pre-commit</code> hooks. You default to getting a <code>conda</code> environment automagically, and you have a custom Python package (<code>project_name/</code>) installed into the environment too, ensuring portability of your data analysis code.</p>"},{"location":"workflows/02-minimal-project/","title":"Creating a minimal project","text":"<p>Sometimes you don't need a full-fledged project, but a minimal one instead. In this case, we have a <code>minitialize</code> command! (<code>minitialize</code> is a portmanteau of <code>minimal</code> and <code>initialize</code>.)</p>"},{"location":"workflows/03-publishing-package/","title":"Publishing the custom source code to a pip server","text":"<p>For a Python data science project, the work product might be a Python package that enables your work to be used by other developers, such as your engineering colleagues or other data scientists. To publish your package to your pre-configured <code>internal</code> pip server, you can execute the following interactive command:</p> <pre><code>pyds package publish --to internal --bump patch\n</code></pre> <p>Underneath the hood, you'd have to remember at least the following commands to do a new release:</p> <pre><code>bumpversion patch --verbose\nrm dist/*\npython -m build .\ntwine upload -r pip-internal dist/\n</code></pre> <p>That's a lot of jumping between tools! Instead of having to remember all of them, now you only have to remember <code>pyds publish package</code>.</p>"}]}